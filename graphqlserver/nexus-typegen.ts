/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Articles: { // root type
    author: string; // String!
    content: string; // String!
    htmlcontent: string; // String!
    id: string; // String!
    previewimage: string; // String!
    title: string; // String!
  }
  Comments: { // root type
    articleid: string; // String!
    id: string; // String!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Articles: { // field return type
    author: string; // String!
    content: string; // String!
    htmlcontent: string; // String!
    id: string; // String!
    previewimage: string; // String!
    title: string; // String!
  }
  Comments: { // field return type
    articleid: string; // String!
    id: string; // String!
    title: string; // String!
  }
  Mutation: { // field return type
    createarticle: NexusGenRootTypes['Articles']; // Articles!
    deletearticle: NexusGenRootTypes['Articles']; // Articles!
    post: NexusGenRootTypes['Comments']; // Comments!
    updatearticle: NexusGenRootTypes['Articles']; // Articles!
  }
  Query: { // field return type
    articlefeed: NexusGenRootTypes['Articles'][]; // [Articles!]!
    comment: NexusGenRootTypes['Comments'][]; // [Comments!]!
  }
}

export interface NexusGenFieldTypeNames {
  Articles: { // field return type name
    author: 'String'
    content: 'String'
    htmlcontent: 'String'
    id: 'String'
    previewimage: 'String'
    title: 'String'
  }
  Comments: { // field return type name
    articleid: 'String'
    id: 'String'
    title: 'String'
  }
  Mutation: { // field return type name
    createarticle: 'Articles'
    deletearticle: 'Articles'
    post: 'Comments'
    updatearticle: 'Articles'
  }
  Query: { // field return type name
    articlefeed: 'Articles'
    comment: 'Comments'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createarticle: { // args
      author?: string | null; // String
      content?: string | null; // String
      htmlcontent?: string | null; // String
      previewimage?: string | null; // String
      title?: string | null; // String
    }
    deletearticle: { // args
      id?: string | null; // String
    }
    post: { // args
      arrticleid?: string | null; // String
      title?: string | null; // String
    }
    updatearticle: { // args
      author?: string | null; // String
      content?: string | null; // String
      htmlcontent?: string | null; // String
      id?: string | null; // String
      previewimage?: string | null; // String
      title?: string | null; // String
    }
  }
  Query: {
    articlefeed: { // args
      cursor?: string | null; // String
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    comment: { // args
      articleidarg?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}